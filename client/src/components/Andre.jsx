/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 E:\Developpement\Interactive Studio\Interactive-StoryV3\Interactive-Story\client\public\Andre.glb
*/
import { useGLTF, useAnimations } from '@react-three/drei'
import React, { useRef,useState, useEffect } from "react";
import { useFrame } from "@react-three/fiber";

function Andre(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/Andre.glb')
  const { actions, names } = useAnimations(animations, group)
  console.log(animations);
  const [rotation, setRotation] = useState([0, 0, 0]);
  const [positionObj, setPositionObj] = useState([0, -0.01, -2]);
  const [advance, setAdvance] = useState(true);
  const [lastPosition, setLastPosition] = useState();
 
  const [advancePath, setAdvancePath] = useState(false);

  const path = props.path;
  const speed = props.speed !== undefined ? props.speed : 1;
console.log(actions);
  useEffect(() => {
    actions[names[props.animationIndex]].reset().fadeIn(0.25).play();
  }, [props.animationIndex, actions, names, group]);

  useFrame((state, delta) => {
    if (!path) {
      setAdvancePath(false);
      return;
    }
  
    setAdvancePath(true);
  
    if (!props.advance) {
      setAdvance(false);
      return;
    }
  
    setAdvance(true);
  
    const time = state.clock.getElapsedTime();
    const position = path.getPointAt(
      ((time * speed) % path.getLength()) / path.getLength()
    );
    setPositionObj([position.x, position.y, position.z]);
  
    const nPosition = path.getPointAt(
      (((time + 0.01) * speed) % path.getLength()) / path.getLength()
    );
    const angleY = Math.atan2(nPosition.x - position.x, nPosition.z - position.z);
    setRotation([0, angleY, 0]);
  
    props.onSend(group);
    props.sendRotate(rotation);
  
  
    setLastPosition(position);
  });
  return (
    <group ref={group} {...props} rotation={rotation} position={positionObj} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Hips} />
          <skinnedMesh name="Wolf3D_Body" geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
          <skinnedMesh name="Wolf3D_Hair" geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
          <skinnedMesh name="Wolf3D_Outfit_Bottom" geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
          <skinnedMesh name="Wolf3D_Outfit_Footwear" geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
          <skinnedMesh name="Wolf3D_Outfit_Top" geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
          <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
          <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
          <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
          <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
        </group>
      </group>
    </group>
  )
}


export default Andre;
useGLTF.preload('/Andre.glb')

